{"version":3,"file":"main.js","mappings":"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","names":["routes","AppRoutingModule","t","core","oAB","cJS","RouterModule","ChatInterfaceService","constructor","http","this","hostUrl","Talk","message","get","params","HttpParams","set","responseType","i0","i1","Yz7","factory","Éµfac","providedIn","message_r2","Message","timestamp","toLocaleTimeString","MessagesComponentComponent_div_16_div_1_Template","MessagesComponentComponent_div_16_ng_template_2_Template","UserIsHuman","_r4","MessagesComponentComponent","botService","messages","Counter","ngOnInit","scrollToBottom","ngAfterViewChecked","myScrollContainer","nativeElement","scrollTop","scrollHeight","sendMessage","msg","messageText","push","Date","TalkToBot","subscribe","data","response","Xpm","selectors","viewQuery","rf","ctx","MessagesComponentComponent_div_16_Template","$event","AppComponent","titleService","title","setTitle","decls","vars","template","AppModule","bootstrap","BrowserModule","FormsModule","HttpClientModule","ServiceWorkerModule","enabled","__NgCli_bootstrap_1","bootstrapModule","catch","err","console","error"],"sourceRoot":"webpack:///","sources":["./src/app/app-routing.module.ts","./src/app/chat-interface.service.ts","./src/app/messages-component/messages-component.component.html","./src/app/messages-component/messages-component.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http'\r\nimport {ChatResponse} from './chat-response';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatInterfaceService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  Talk(message){\r\n      return this.http.get<ChatResponse>(this.hostUrl, { params: new HttpParams().set('text', message), responseType: \"json\" });\r\n    }\r\nhostUrl = \"https://bot.liukonen.dev\";\r\n}\r\n","<div class=\"container-fluid h-100\" id=\"app\">\r\n  <div class=\"row justify-content-center  h-100\">\r\n    <div class=\"col-12 card h-100\">\r\n      <div class=\"card-header msg_head\">\r\n        <div class=\"d-flex bd-highlight justify-content-between\">\r\n          <div class=\"user_info\">\r\n            <span>River Chatbot</span>\r\n            <p><i id=\"msgCount\">{{Counter}}</i> Messages</p>\r\n          </div>\r\n          <a href=\"#\" class=\"text-light\" aria-label=\"Info\" data-bs-toggle=\"modal\" data-bs-target=\"#aboutModal\">\r\n            <i class=\"fa-solid fa-address-card fa-2x\"></i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body msg_card_body scr\" id=\"dialogue\" #scrollMe>\r\n        <div *ngFor=\"let message of messages\">\r\n          <div *ngIf=\"!message.UserIsHuman; else elseBlock\" class=\"d-flex justify-content-start mb-4\">\r\n            <div class=\"img_cont_msg\">\r\n              <img src=\"./assets/images/msrobot.png\" class=\"rounded-circle user_img_msg\" alt=\"River\" />\r\n            </div>\r\n            <div class=\"msg_cotainer\">\r\n              <span>{{message.Message}}</span>\r\n              <span class=\"msg_time\">{{message.timestamp.toLocaleTimeString()}}</span>\r\n            </div>\r\n          </div>\r\n          <ng-template #elseBlock>\r\n            <div class=\"d-flex justify-content-end mb-4\">\r\n              <div class=\"msg_cotainer_send\">\r\n                <span>{{message.Message}}</span>\r\n                <span class=\"msg_time_send\">{{message.timestamp.toLocaleTimeString()}}</span>\r\n              </div>\r\n              <div class=\"img_cont_msg\">\r\n                <img src=\"./assets/images/user.png\" class=\"rounded-circle user_img_msg\" alt=\"User\" />\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-footer\">\r\n        <form (ngSubmit)=\"sendMessage(messageText)\">\r\n          <div class=\"input-group\">\r\n            <span class=\"input-group-text attach_btn\"></span>\r\n            <input type=\"text\" class=\"form-control type_msg\" aria-label=\"Input Message\" [(ngModel)]=\"messageText\"\r\n              name=\"mgText\" placeholder=\"Type your message...\" autocomplete=\"off\">\r\n            <button type=\"submit\" class=\"input-group-text send_btn\"> <i class=\"fas fa-location-arrow\"></i></button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, AfterViewChecked, ElementRef, ViewChild, } from '@angular/core';\r\nimport {ChatInterfaceService} from '../chat-interface.service';\r\nimport { ChatResponse } from '../chat-response';\r\nimport {ChatInterface} from '../chat-interface';\r\n//import { ChangeDetectionStrategy } from '@angular/compiler/src/compiler_facade_interface';\r\n//import { Message } from '@angular/compiler/src/i18n/i18n_ast';\r\n\r\n@Component({\r\n  selector: 'app-messages-component',\r\n  templateUrl: './messages-component.component.html',\r\n  styleUrls: ['./messages-component.component.sass']\r\n})\r\n\r\n\r\n\r\nexport class MessagesComponentComponent implements OnInit, AfterViewChecked  {\r\n@ViewChild('scrollMe') private myScrollContainer: ElementRef;\r\nmessages: ChatInterface[] = []\r\nmessageText: string\r\nCounter : number = 0\r\n\r\n  constructor(private botService: ChatInterfaceService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.scrollToBottom();\r\n  }\r\n  ngAfterViewChecked() {\r\n    this.scrollToBottom();\r\n}\r\n\r\nscrollToBottom(): void {\r\n    try {\r\n        this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight;\r\n    } catch(err) { }\r\n}\r\n\r\n  sendMessage(message: string){\r\n    let msg = this.messageText;\r\nthis.messageText = \"\";\r\n    this.messages.push({timestamp: new Date(), Message: msg, UserIsHuman: true});\r\n    this.TalkToBot(msg);\r\n    this.Counter++;\r\n  }\r\n\r\n  TalkToBot(message) {\r\n    this.botService.Talk(message).subscribe((data: ChatResponse) => { this.messages.push({timestamp: new Date(), Message: data.response, UserIsHuman: false})});\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.sass']\r\n})\r\nexport class AppComponent {\r\n  title = 'River - RiveScript based chatbot in Angular';\r\n\r\n  public constructor(private titleService: Title){\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n\r\n}\r\n","\r\n    <app-messages-component></app-messages-component>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms'; // <-- NgModel lives here\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MessagesComponentComponent } from './messages-component/messages-component.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { environment } from '../environments/environment';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MessagesComponentComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"x_google_ignoreList":[]}