{"version":3,"file":"main.js","mappings":"gJAUM,MAAOA,2CAAgB,0BAAhBA,gCAHDC,aAHW,IAIXA,sBCAN,MAAOC,EAEXC,YAAoBC,eAKtBC,aAAU,0BALgC,CAExCC,KAAKC,GACD,OAAOF,KAAKD,KAAKI,IAAkBH,KAAKI,QAAS,CAAEC,QAAQ,IAAIC,MAAaC,IAAI,OAAQL,GAAUM,aAAc,QAClH,wCANSX,GAAoBY,wCAApBZ,EAAoBa,QAApBb,EAAoB,qBAFnB,qECUJc,kBAA4F,YAExFA,kBACFA,QACAA,kBAA0B,UAClBA,SAAmBA,QACzBA,mBAAuBA,SAA0CA,4CAD3DA,0BACiBA,2EAIzBA,kBAA6C,WAA7CA,CAA6C,UAEnCA,SAAmBA,QACzBA,mBAA4BA,SAA0CA,UAExEA,kBACEA,kBACFA,0CALQA,0BACsBA,2EAdpCA,eACEA,wBASAA,2CAWFA,6CApBQA,sCAA4B,eCDtC,MAAOC,EAMXd,YAAoBe,qBAJtBb,cAA4B,GAE5BA,aAAmB,CAEuC,CAExDc,WACEd,KAAKe,gBACP,CACAC,qBACEhB,KAAKe,gBACT,CAEAA,iBACI,IACIf,KAAKiB,kBAAkBC,cAAcC,UAAYnB,KAAKiB,kBAAkBC,cAAcE,YAC7E,QACjB,CAEEC,YAAYnB,GACV,IAAIoB,EAAMtB,KAAKuB,YACnBvB,KAAKuB,YAAc,GACfvB,KAAKwB,SAASC,KAAK,CAACC,UAAW,IAAIC,KAAQC,QAASN,EAAKO,aAAa,IACtE7B,KAAK8B,UAAUR,GACftB,KAAK+B,SACP,CAEAD,UAAU5B,GACRF,KAAKa,WAAWZ,KAAKC,GAAS8B,UAAWC,IAAyBjC,KAAKwB,SAASC,KAAK,CAACC,UAAW,IAAIC,KAAQC,QAASK,EAAKC,SAAUL,aAAa,GAAM,EAC1J,wCA/BWjB,GAA0BH,mCAA1BG,EAA0BuB,85CDfvCxB,iBAA4C,UAA5CA,CAA4C,UAA5CA,CAA4C,UAA5CA,CAA4C,UAA5CA,CAA4C,UAA5CA,CAA4C,UAM1BA,yBAAaA,QACnBA,aAAG,SAAiBA,UAAWA,QAAKA,sBAAQA,UAE9CA,gBACEA,gBACFA,YAGJA,qBACEA,yBAsBFA,QACAA,mBAAyB,cACjBA,mCAAYyB,4BAAwB,GACxCzB,mBACEA,oBACAA,qBAA4EA,2DAA5EA,QAEAA,sBAAyDA,iBAAqCA,2BArC1EA,2BAQCA,qCA2BuDA,6hEElClF,MAAO0B,EAGXvC,YAA2BwC,uBAF3BtC,WAAQ,8CAGNA,KAAKsC,aAAaC,SAASvC,KAAKwC,MAClC,wCALWH,GAAY5B,sCAAZ4B,EAAYF,oECPrBxB,oECGG,MAAM8B,cACC,ECoBR,MAAOC,2CAAS,0BAATA,EAASC,WAFRN,iCAPVO,KACAjD,EACAkD,KACAC,KACAC,cAA6B,iBAAkB,CAAEC,QAASP,kBCd1DA,iBACFQ,SAGFC,OAAyBC,gBAAgBT,GACtCU,MAAMC,GAAOC,QAAQC,MAAMF","names":["AppRoutingModule","RouterModule","ChatInterfaceService","constructor","http","this","Talk","message","get","hostUrl","params","HttpParams","set","responseType","core","factory","i0","MessagesComponentComponent","botService","ngOnInit","scrollToBottom","ngAfterViewChecked","myScrollContainer","nativeElement","scrollTop","scrollHeight","sendMessage","msg","messageText","messages","push","timestamp","Date","Message","UserIsHuman","TalkToBot","Counter","subscribe","data","response","selectors","ctx","AppComponent","titleService","setTitle","title","environment","AppModule","bootstrap","BrowserModule","FormsModule","HttpClientModule","ServiceWorkerModule","enabled","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","catch","err","console","error"],"sourceRoot":"webpack:///","sources":["./src/app/app-routing.module.ts","./src/app/chat-interface.service.ts","./src/app/messages-component/messages-component.component.html","./src/app/messages-component/messages-component.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/environments/environment.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http'\r\nimport {ChatResponse} from './chat-response';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatInterfaceService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  Talk(message){\r\n      return this.http.get<ChatResponse>(this.hostUrl, { params: new HttpParams().set('text', message), responseType: \"json\" });\r\n    }\r\nhostUrl = \"https://bot.liukonen.dev\";\r\n}\r\n","<div class=\"container-fluid h-100\" id=\"app\">\r\n  <div class=\"row justify-content-center  h-100\">\r\n    <div class=\"col-12 card h-100\">\r\n      <div class=\"card-header msg_head\">\r\n        <div class=\"d-flex bd-highlight justify-content-between\">\r\n          <div class=\"user_info\">\r\n            <span>River Chatbot</span>\r\n            <p><i id=\"msgCount\">{{Counter}}</i> Messages</p>\r\n          </div>\r\n          <a href=\"#\" class=\"text-light\" aria-label=\"Info\" data-bs-toggle=\"modal\" data-bs-target=\"#aboutModal\">\r\n            <i class=\"fa-solid fa-address-card fa-2x\"></i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body msg_card_body scr\" id=\"dialogue\" #scrollMe>\r\n        <div *ngFor=\"let message of messages\">\r\n          <div *ngIf=\"!message.UserIsHuman; else elseBlock\" class=\"d-flex justify-content-start mb-4\">\r\n            <div class=\"img_cont_msg\">\r\n              <img src=\"./assets/images/msrobot.png\" class=\"rounded-circle user_img_msg\" alt=\"River\" />\r\n            </div>\r\n            <div class=\"msg_cotainer\">\r\n              <span>{{message.Message}}</span>\r\n              <span class=\"msg_time\">{{message.timestamp.toLocaleTimeString()}}</span>\r\n            </div>\r\n          </div>\r\n          <ng-template #elseBlock>\r\n            <div class=\"d-flex justify-content-end mb-4\">\r\n              <div class=\"msg_cotainer_send\">\r\n                <span>{{message.Message}}</span>\r\n                <span class=\"msg_time_send\">{{message.timestamp.toLocaleTimeString()}}</span>\r\n              </div>\r\n              <div class=\"img_cont_msg\">\r\n                <img src=\"./assets/images/user.png\" class=\"rounded-circle user_img_msg\" alt=\"User\" />\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-footer\">\r\n        <form (ngSubmit)=\"sendMessage(messageText)\">\r\n          <div class=\"input-group\">\r\n            <span class=\"input-group-text attach_btn\"></span>\r\n            <input type=\"text\" class=\"form-control type_msg\" aria-label=\"Input Message\" [(ngModel)]=\"messageText\"\r\n              name=\"mgText\" placeholder=\"Type your message...\" autocomplete=\"off\">\r\n            <button type=\"submit\" class=\"input-group-text send_btn\"> <i class=\"fas fa-location-arrow\"></i></button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, AfterViewChecked, ElementRef, ViewChild, } from '@angular/core';\r\nimport {ChatInterfaceService} from '../chat-interface.service';\r\nimport { ChatResponse } from '../chat-response';\r\nimport {ChatInterface} from '../chat-interface';\r\n//import { ChangeDetectionStrategy } from '@angular/compiler/src/compiler_facade_interface';\r\n//import { Message } from '@angular/compiler/src/i18n/i18n_ast';\r\n\r\n@Component({\r\n  selector: 'app-messages-component',\r\n  templateUrl: './messages-component.component.html',\r\n  styleUrls: ['./messages-component.component.sass']\r\n})\r\n\r\n\r\n\r\nexport class MessagesComponentComponent implements OnInit, AfterViewChecked  {\r\n@ViewChild('scrollMe') private myScrollContainer: ElementRef;\r\nmessages: ChatInterface[] = []\r\nmessageText: string\r\nCounter : number = 0\r\n\r\n  constructor(private botService: ChatInterfaceService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.scrollToBottom();\r\n  }\r\n  ngAfterViewChecked() {\r\n    this.scrollToBottom();\r\n}\r\n\r\nscrollToBottom(): void {\r\n    try {\r\n        this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight;\r\n    } catch(err) { }\r\n}\r\n\r\n  sendMessage(message: string){\r\n    let msg = this.messageText;\r\nthis.messageText = \"\";\r\n    this.messages.push({timestamp: new Date(), Message: msg, UserIsHuman: true});\r\n    this.TalkToBot(msg);\r\n    this.Counter++;\r\n  }\r\n\r\n  TalkToBot(message) {\r\n    this.botService.Talk(message).subscribe((data: ChatResponse) => { this.messages.push({timestamp: new Date(), Message: data.response, UserIsHuman: false})});\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.sass']\r\n})\r\nexport class AppComponent {\r\n  title = 'River - RiveScript based chatbot in Angular';\r\n\r\n  public constructor(private titleService: Title){\r\n    this.titleService.setTitle(this.title);\r\n  }\r\n\r\n}\r\n","\r\n    <app-messages-component></app-messages-component>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms'; // <-- NgModel lives here\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MessagesComponentComponent } from './messages-component/messages-component.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { environment } from '../environments/environment';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MessagesComponentComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"x_google_ignoreList":[]}